# File       : matrixCalc.py                                                                                 
#                                                                                                           
# Purpose    : Matrix calculator can calculate determinant, transpose, adjoint, inverse, addition and       
#              and subtraction of any 2 cross 2 3 cross 3 matrix/matrices.                                  
#                                                                                                           
# Date       : 19/03/2014                                                                                   
#                                                                                                           
# Project    : Matrix calculator is my home project. I have developed matrxCalc for different               
#              platforms. I've developed matrixCalc for Android, Windows(Python & Tkinter), Web(Javascript),
#              C Language and Linux(Shell Script). All language's(except android) source code can be found on
#              GitHub. My whole project is completely open source.   
#                                                                                                                                                 
# Author     : Daxeel Soni ( www.github.com/daxeel )    

from tkinter import *
root = Tk()
root.title('Matrix Calculator - Daxeel Soni')
frm_main_left_right_container = Frame(root)
frm_main_left_container = Frame(frm_main_left_right_container)
def twoctwo():
    frmblnkk = Frame(frm_main_left_container)
    frmblnkk.pack(side=TOP)
    nlB = Label(frm_main_left_container, text='2 cross 2 Matrix')
    nlB.pack(side=TOP)
    frame_main = Frame(frm_main_left_container)
    framel = Frame(frame_main)
    a = Entry(framel)
    a.pack()
    c = Entry(framel)
    c.pack()
    framel.pack(side=LEFT)
    framer = Frame(frame_main)
    b = Entry(framer)
    b.pack()
    d = Entry(framer)
    d.pack()
    framer.pack(side=RIGHT)
    frame_main.pack(side=TOP)
    frameb = Frame(frm_main_left_container)
    # determinant function
    def determinant_cal():  
        if len(a.get()) != 0 and len(b.get()) != 0 and len(c.get()) != 0 and len(d.get()) != 0:
            aa = int(a.get())
            bb = int(b.get())
            cc = int(c.get())
            dd = int(d.get())
            det = int((aa*dd)-(bb*cc))
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            anslbl = Label(frm_main_left_container, text='Calculated determinant of 2c2 matrix is')
            anslbl.pack()
            anslbl2 = Label(frm_main_left_container, text=det)
            anslbl2.pack()
        else:
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            anslbl = Label(frm_main_left_container, text='Error : Please input all the values')
            anslbl.pack()
    # transpose function
    def transpose_cal():
        if len(a.get()) != 0 and len(b.get()) != 0 and len(c.get()) != 0 and len(d.get()) != 0:
            aa = int(a.get())
            bb = int(b.get())
            cc = int(c.get())
            dd = int(d.get())
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            tralbl = Label(frm_main_left_container, text='Calculated transpose of 2c2 matrix is')
            tralbl.pack()
            frmtra1 = Frame(frm_main_left_container)
            tralbla = Label(frmtra1, text='%d'%(aa))
            tralbla.pack(side=LEFT)
            tralblc = Label(frmtra1, text='          %d'%(cc))
            tralblc.pack(side=LEFT)
            frmtra1.pack(side=TOP)
            frmtra2 = Frame(frm_main_left_container)
            tralblb = Label(frmtra2, text='%d'%(bb))
            tralblb.pack(side=LEFT)
            tralbld = Label(frmtra2, text='          %d'%(dd))
            tralbld.pack(side=LEFT)
            frmtra2.pack(side=TOP)
        else:
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            anslbl = Label(frm_main_left_container, text='Error : Please input all the values')
            anslbl.pack()
    # adjoint function    
    def adjoint_cal():
        if len(a.get()) != 0 and len(b.get()) != 0 and len(c.get()) != 0 and len(d.get()) != 0:
            aa = int(a.get())
            bb = int(b.get())
            cc = int(c.get())
            dd = int(d.get())
            nbb = int(-int(bb))
            ncc = int(-int(cc))
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            adjlbl = Label(frm_main_left_container, text='Calculated adjoint of 2c2 matrix is')
            adjlbl.pack()
            frmadj1 = Frame(frm_main_left_container)
            adjlbld = Label(frmadj1, text='%d'%(dd))
            adjlbld.pack(side=LEFT)
            adjlblc = Label(frmadj1, text='          %d'%(nbb))
            adjlblc.pack(side=LEFT)
            frmadj1.pack(side=TOP)
            frmadj2 = Frame(frm_main_left_container)
            adjlblb = Label(frmadj2, text='%d'%(ncc))
            adjlblb.pack(side=LEFT)
            adjlbla = Label(frmadj2, text='          %d'%(aa))
            adjlbla.pack(side=LEFT)
            frmadj2.pack(side=TOP)
        else:
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            anslbl = Label(frm_main_left_container, text='Error : Please input all the values')
            anslbl.pack()
    # inverse function     
    def inverse_cal():
        if len(a.get()) != 0 and len(b.get()) != 0 and len(c.get()) != 0 and len(d.get()) != 0:
            aa = int(a.get())
            bb = int(b.get())
            cc = int(c.get())
            dd = int(d.get())
            nbb = int(-int(bb))
            ncc = int(-int(cc))
            det = int((aa*dd)-(bb*cc))
            daa = float(aa/det)
            dbb = float(nbb/det)
            dcc = float(ncc/det)
            ddd = float(dd/det)
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            tinvbl = Label(frm_main_left_container, text='Calculated inverse is')
            tinvbl.pack()
            frminv1 = Frame(frm_main_left_container)
            invlbld = Label(frminv1, text='%f'%(ddd))
            invlbld.pack(side=LEFT)
            invlblc = Label(frminv1, text='          %f'%(dbb))
            invlblc.pack(side=LEFT)
            frminv1.pack(side=TOP)
            frminv2 = Frame(frm_main_left_container)
            invlblb = Label(frminv2, text='%f'%(dcc))
            invlblb.pack(side=LEFT)
            invlbla = Label(frminv2, text='          %f'%(daa))
            invlbla.pack(side=LEFT)
            frminv2.pack(side=TOP)
        else:
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            anslbl = Label(frm_main_left_container, text='Error : Please input all the values')
            anslbl.pack()
    # addition function
    def addition_cal():
        if len(a.get()) != 0 and len(b.get()) != 0 and len(c.get()) != 0 and len(d.get()) != 0:
            aa = int(a.get())
            bb = int(b.get())
            cc = int(c.get())
            dd = int(d.get())
            add = Tk()
            add.title('Addition')
            hdlbl = Label(add, text='Enter another matrix value to calculate addition of two matrices')
            hdlbl.pack()
            blnklbl = Label(add, text='  ')
            blnklbl.pack()
            frame_main = Frame(add)
            framel = Frame(frame_main)
            add_a = Entry(framel)
            add_a.pack()
            add_c = Entry(framel)
            add_c.pack()
            framel.pack(side=LEFT)
            framer = Frame(frame_main)
            add_b = Entry(framer)
            add_b.pack()
            add_d = Entry(framer)
            add_d.pack()
            framer.pack(side=RIGHT)
            frame_main.pack(side=TOP)
            def done_addition():
                g_add_a = int(add_a.get())
                g_add_b = int(add_b.get())
                g_add_c = int(add_c.get())
                g_add_d = int(add_d.get())
                addition_a = aa + g_add_a
                addition_b = bb + g_add_b
                addition_c = cc + g_add_c
                addition_d = dd + g_add_d
                nla = Label(frm_main_left_container, text='    ')
                nla.pack(side=TOP)
                tinvbl = Label(frm_main_left_container, text='Calculated addition is')
                tinvbl.pack()
                frminv1 = Frame(frm_main_left_container)
                invlbld = Label(frminv1, text='%d'%(addition_a))
                invlbld.pack(side=LEFT)
                invlblc = Label(frminv1, text='          %d'%(addition_b))
                invlblc.pack(side=LEFT)
                frminv1.pack(side=TOP)
                frminv2 = Frame(frm_main_left_container)
                invlblb = Label(frminv2, text='%d'%(addition_c))
                invlblb.pack(side=LEFT)
                invlbla = Label(frminv2, text='          %d'%(addition_d))
                invlbla.pack(side=LEFT)
                frminv2.pack(side=TOP)
                frm_main_left_container.destroy
            all_btn_frm_add = Frame(add)     
            dn_btn = Button(all_btn_frm_add, text='Done', relief=GROOVE, command=done_addition)
            dn_btn.pack(side=LEFT)
            cls_btn = Button(all_btn_frm_add, text='Close', relief=GROOVE, command=add.destroy)
            cls_btn.pack(side=LEFT)
            all_btn_frm_add.pack(side=TOP)
            add.mainloop()
        else:
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            tinvbl = Label(frm_main_left_container, text='Error : Please input all the values')
            tinvbl.pack()
    # subtraction function
    def subtraction_cal():
        if len(a.get()) != 0 and len(b.get()) != 0 and len(c.get()) != 0 and len(d.get()) != 0:
            aa = int(a.get())
            bb = int(b.get())
            cc = int(c.get())
            dd = int(d.get())
            sub = Tk()
            sub.title('Subtraction')
            hdlbl = Label(sub, text='Enter another matrix value to calculate subtraction of two matrices')
            hdlbl.pack()
            blnklbl = Label(sub, text='  ')
            blnklbl.pack()
            frame_main = Frame(sub)
            framel = Frame(frame_main)
            add_a = Entry(framel)
            add_a.pack()
            add_c = Entry(framel)
            add_c.pack()
            framel.pack(side=LEFT)
            framer = Frame(frame_main)
            add_b = Entry(framer)
            add_b.pack()
            add_d = Entry(framer)
            add_d.pack()
            framer.pack(side=RIGHT)
            frame_main.pack(side=TOP)
            def done_subtraction():
                g_add_a = int(add_a.get())
                g_add_b = int(add_b.get())
                g_add_c = int(add_c.get())
                g_add_d = int(add_d.get())
                addition_a = aa - g_add_a
                addition_b = bb - g_add_b
                addition_c = cc - g_add_c
                addition_d = dd - g_add_d
                nla = Label(frm_main_left_container, text='    ')
                nla.pack(side=TOP)
                tinvbl = Label(frm_main_left_container, text='Calculated addition is')
                tinvbl.pack()
                frminv1 = Frame(frm_main_left_container)
                invlbld = Label(frminv1, text='%d'%(addition_a))
                invlbld.pack(side=LEFT)
                invlblc = Label(frminv1, text='          %d'%(addition_b))
                invlblc.pack(side=LEFT)
                frminv1.pack(side=TOP)
                frminv2 = Frame(frm_main_left_container)
                invlblb = Label(frminv2, text='%d'%(addition_c))
                invlblb.pack(side=LEFT)
                invlbla = Label(frminv2, text='          %d'%(addition_d))
                invlbla.pack(side=LEFT)
                frminv2.pack(side=TOP)
            all_btn_frm = Frame(sub)    
            dn_btn = Button(all_btn_frm, text='Done', relief=GROOVE, command=done_subtraction)
            dn_btn.pack(side=LEFT)
            cls_btn = Button(all_btn_frm, text='Close', relief=GROOVE, command=sub.destroy)
            cls_btn.pack(side=LEFT)
            all_btn_frm.pack(side=TOP)
            sub.mainloop()
        else:
            nla = Label(frm_main_left_container, text='    ')
            nla.pack(side=TOP)
            tinvbl = Label(frm_main_left_container, text='Error : Please input all the values')
            tinvbl.pack()
    # clear function
    def clear_all():
        a.delete(0, END)
        b.delete(0, END)
        c.delete(0, END)
        d.delete(0, END)
    # determinant button  
    myButton = Button(frameb,text="Determinant",relief=GROOVE,command=determinant_cal)
    myButton.pack(side=LEFT)
    # transpose button  
    traButton = Button(frameb,text="Transpose",relief=GROOVE,command=transpose_cal)
    traButton.pack(side=LEFT)
    # adjoint button  
    adjButton = Button(frameb,text="Adjoint",relief=GROOVE,command=adjoint_cal)
    adjButton.pack(side=LEFT)
    # inverse button  
    invButton = Button(frameb,text="Inverse",relief=GROOVE,command=inverse_cal)
    invButton.pack(side=LEFT)
    # addition button  
    addButton = Button(frameb,text="Addition",relief=GROOVE,command=addition_cal)
    addButton.pack(side=LEFT)
    # subtraction button  
    subButton = Button(frameb,text="Subtraction",relief=GROOVE,command=subtraction_cal)
    subButton.pack(side=LEFT)
    # clear button
    clrButton = Button(frameb,text="Clear",relief=GROOVE,command=clear_all)
    clrButton.pack(side=LEFT)
    frameb.pack(side=TOP)
frm_main_left_container.pack(side=LEFT)
frm_blank_container = Frame(frm_main_left_right_container)
blnllbl = Label(frm_blank_container, text='                  ')
blnllbl.pack()
frm_blank_container.pack(side=LEFT)
frm_main_right_container = Frame(frm_main_left_right_container)
def threecthree():
    frmblnk = Frame(frm_main_right_container)
    frmblnk.pack(side=TOP)
    nlA = Label(frmblnk, text='3 cross 3 Matrix')
    nlA.pack(side=TOP)
    # 3 CROSS 3 FRAMEWORK
    frame_main_t = Frame(frm_main_right_container)
    framet = Frame(frame_main_t)
    ta = Entry(framet)
    ta.pack()
    td = Entry(framet)
    td.pack()
    tg = Entry(framet)
    tg.pack()
    framet.pack(side=LEFT)
    framem = Frame(frame_main_t)
    tb = Entry(framem)
    tb.pack()
    te = Entry(framem)
    te.pack()
    th = Entry(framem)
    th.pack()
    framem.pack(side=RIGHT)
    frameb = Frame(frame_main_t)
    tc = Entry(frameb)
    tc.pack()
    tf = Entry(frameb)
    tf.pack()
    ti = Entry(frameb)
    ti.pack()
    frameb.pack(side=RIGHT)
    frame_main_t.pack(side=TOP)
    framebt = Frame(frm_main_right_container)
    # determinant function
    def determinant_cal_t():
        if len(ta.get()) != 0 and len(tb.get()) != 0 and len(tc.get()) != 0 and len(td.get()) != 0 and len(te.get()) != 0 and len(tf.get()) != 0 and len(tg.get()) != 0 and len(th.get()) != 0 and len(ti.get()) != 0:
            aat = int(ta.get())
            cct = int(tb.get())
            bbt = int(tc.get())
            ddt = int(td.get())
            fft = int(te.get())
            eet = int(tf.get())
            ggt = int(tg.get())
            iit = int(th.get())
            hht = int(ti.get())
            det = int(int(aat*((eet*iit)-(hht*fft)))-int(bbt*((ddt*iit)-(ggt*fft)))+int(cct*((ddt*hht)-(eet*ggt))))
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Calculated determinant of 3c3 matrix is')
            anslblt.pack()
            anslbl2t = Label(frm_main_right_container, text=det)
            anslbl2t.pack()
        else:
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Error : Please input all the values')
            anslblt.pack()
    # determinant button  
    dettButton = Button(framebt,text="Determinant",relief=GROOVE,command=determinant_cal_t)
    dettButton.pack(side=LEFT)
    # transpose function
    def transpose_cal_t():
        if len(ta.get()) != 0 and len(tb.get()) != 0 and len(tc.get()) != 0 and len(td.get()) != 0 and len(te.get()) != 0 and len(tf.get()) != 0 and len(tg.get()) != 0 and len(th.get()) != 0 and len(ti.get()) != 0:
            aat = int(ta.get())
            cct = int(tb.get())
            bbt = int(tc.get())
            ddt = int(td.get())
            fft = int(te.get())
            eet = int(tf.get())
            ggt = int(tg.get())
            iit = int(th.get())
            hht = int(ti.get())
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            tralbl = Label(frm_main_right_container, text='Calculated transpose of 3c3 matrix is')
            tralbl.pack()
            frmtra1t = Frame(frm_main_right_container)
            tralblat = Label(frmtra1t, text='%d'%(aat))
            tralblat.pack(side=LEFT)
            tralbldt = Label(frmtra1t, text='          %d'%(ddt))
            tralbldt.pack(side=LEFT)
            tralblgt = Label(frmtra1t, text='          %d'%(ggt))
            tralblgt.pack(side=LEFT)
            frmtra1t.pack(side=TOP)
            frmtra2t = Frame(frm_main_right_container)
            tralblbt = Label(frmtra2t, text='%d'%(bbt))
            tralblbt.pack(side=LEFT)
            tralblet = Label(frmtra2t, text='          %d'%(eet))
            tralblet.pack(side=LEFT)
            tralblht = Label(frmtra2t, text='          %d'%(hht))
            tralblht.pack(side=LEFT)
            frmtra2t.pack(side=TOP)
            frmtra3t = Frame(frm_main_right_container)
            tralblct = Label(frmtra3t, text='%d'%(cct))
            tralblct.pack(side=LEFT)
            tralblft = Label(frmtra3t, text='          %d'%(fft))
            tralblft.pack(side=LEFT)
            tralblit = Label(frmtra3t, text='          %d'%(iit))
            tralblit.pack(side=LEFT)
            frmtra3t.pack(side=TOP)
        else:
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Error : Please input all the values')
            anslblt.pack()
    # transpose button  
    tratButton = Button(framebt,text="Transpose",relief=GROOVE,command=transpose_cal_t)
    tratButton.pack(side=LEFT)
    # adjoint function
    def adjoint_cal_t():
        if len(ta.get()) != 0 and len(tb.get()) != 0 and len(tc.get()) != 0 and len(td.get()) != 0 and len(te.get()) != 0 and len(tf.get()) != 0 and len(tg.get()) != 0 and len(th.get()) != 0 and len(ti.get()) != 0:
            aat = int(ta.get())
            cct = int(tb.get())
            bbt = int(tc.get())
            ddt = int(td.get())
            fft = int(te.get())
            eet = int(tf.get())
            ggt = int(tg.get())
            iit = int(th.get())
            hht = int(ti.get())
            aata = int((eet*iit)-(hht*fft))
            bbta = int((ggt*fft)-(ddt*iit))
            ccta = int((ddt*hht)-(eet*ggt))
            ddta = int((cct*hht)-(bbt*iit))
            eeta = int((aat*iit)-(cct*ggt))
            ffta = int((bbt*ggt)-(aat*hht))
            ggta = int((fft*bbt)-(eet*cct))
            hhta = int((cct*ddt)-(aat*fft))
            iita = int((aat*eet)-(bbt*ddt))
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            adjlbl = Label(frm_main_right_container, text='Calculated adjoint of 3c3 matrix is')
            adjlbl.pack()
            frmadj1t = Frame(frm_main_right_container)
            adjlblat = Label(frmadj1t, text='%d'%(aata))
            adjlblat.pack(side=LEFT)
            adjlbldt = Label(frmadj1t, text='          %d'%(ddta))
            adjlbldt.pack(side=LEFT)
            adjlblgt = Label(frmadj1t, text='          %d'%(ggta))
            adjlblgt.pack(side=LEFT)
            frmadj1t.pack(side=TOP)
            frmadj2t = Frame(frm_main_right_container)
            adjlblbt = Label(frmadj2t, text='%d'%(bbta))
            adjlblbt.pack(side=LEFT)
            adjlblet = Label(frmadj2t, text='          %d'%(eeta))
            adjlblet.pack(side=LEFT)
            adjlblht = Label(frmadj2t, text='          %d'%(hhta))
            adjlblht.pack(side=LEFT)
            frmadj2t.pack(side=TOP)
            frmadj3t = Frame(frm_main_right_container)
            adjlblct = Label(frmadj3t, text='%d'%(ccta))
            adjlblct.pack(side=LEFT)
            adjlblft = Label(frmadj3t, text='          %d'%(ffta))
            adjlblft.pack(side=LEFT)
            adjlblit = Label(frmadj3t, text='          %d'%(iita))
            adjlblit.pack(side=LEFT)
            frmadj3t.pack(side=TOP)
        else:
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Error : Please input all the values')
            anslblt.pack()
    # adjoint button  
    adjtButton = Button(framebt,text="Adjoint",relief=GROOVE,command=adjoint_cal_t)
    adjtButton.pack(side=LEFT)
    # inverse function
    def inverse_cal_t():
        if len(ta.get()) != 0 and len(tb.get()) != 0 and len(tc.get()) != 0 and len(td.get()) != 0 and len(te.get()) != 0 and len(tf.get()) != 0 and len(tg.get()) != 0 and len(th.get()) != 0 and len(ti.get()) != 0:
            aat = int(ta.get())
            cct = int(tb.get())
            bbt = int(tc.get())
            ddt = int(td.get())
            fft = int(te.get())
            eet = int(tf.get())
            ggt = int(tg.get())
            iit = int(th.get())
            hht = int(ti.get())
            aata = int((eet*iit)-(hht*fft))
            bbta = int((ggt*fft)-(ddt*iit))
            ccta = int((ddt*hht)-(eet*ggt))
            ddta = int((cct*hht)-(bbt*iit))
            eeta = int((aat*iit)-(cct*ggt))
            ffta = int((bbt*ggt)-(aat*hht))
            ggta = int((fft*bbt)-(eet*cct))
            hhta = int((cct*ddt)-(aat*fft))
            iita = int((aat*eet)-(bbt*ddt))
            det = int(int(aat*((eet*iit)-(hht*fft)))-int(bbt*((ddt*iit)-(ggt*fft)))+int(cct*((ddt*hht)-(eet*ggt))))
            aatainv = float(aata/det)
            bbtainv = float(bbta/det)
            cctainv = float(ccta/det)
            ddtainv = float(ddta/det)
            eetainv = float(eeta/det)
            fftainv = float(ffta/det)
            ggtainv = float(ggta/det)
            hhtainv = float(hhta/det)
            iitainv = float(iita/det)
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            invlbl = Label(frm_main_right_container, text='Calculated inverse of 3c3 matrix is')
            invlbl.pack()
            frminv1t = Frame(frm_main_right_container)
            invlblat = Label(frminv1t, text='%f'%(aatainv))
            invlblat.pack(side=LEFT)
            invlbldt = Label(frminv1t, text='          %f'%(ddtainv))
            invlbldt.pack(side=LEFT)
            invlblgt = Label(frminv1t, text='          %f'%(ggtainv))
            invlblgt.pack(side=LEFT)
            frminv1t.pack(side=TOP)
            frminv2t = Frame(frm_main_right_container)
            invlblbt = Label(frminv2t, text='%f'%(bbtainv))
            invlblbt.pack(side=LEFT)
            invlblet = Label(frminv2t, text='          %f'%(eetainv))
            invlblet.pack(side=LEFT)
            invlblht = Label(frminv2t, text='          %f'%(hhtainv))
            invlblht.pack(side=LEFT)
            frminv2t.pack(side=TOP)
            frminv3t = Frame(frm_main_right_container)
            invlblct = Label(frminv3t, text='%f'%(cctainv))
            invlblct.pack(side=LEFT)
            invlblft = Label(frminv3t, text='          %f'%(fftainv))
            invlblft.pack(side=LEFT)
            invlblit = Label(frminv3t, text='          %f'%(iitainv))
            invlblit.pack(side=LEFT)
            frminv3t.pack(side=TOP)
        else:
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Error : Please input all the values')
            anslblt.pack()
    # inverse button  
    invtButton = Button(framebt,text="Inverse",relief=GROOVE,command=inverse_cal_t)
    invtButton.pack(side=LEFT)
    framebt.pack(side=TOP)
    # addition function
    def addition_cal_t():
        if len(ta.get()) != 0 and len(tb.get()) != 0 and len(tc.get()) != 0 and len(td.get()) != 0 and len(te.get()) != 0 and len(tf.get()) != 0 and len(tg.get()) != 0 and len(th.get()) != 0 and len(ti.get()) != 0:
            aat = int(ta.get())
            cct = int(tb.get())
            bbt = int(tc.get())
            ddt = int(td.get())
            fft = int(te.get())
            eet = int(tf.get())
            ggt = int(tg.get())
            iit = int(th.get())
            hht = int(ti.get())
            add_t = Tk()
            add_t.title('Addition')
            hdlbl = Label(add_t, text='Enter another matrix value to calculate addition of two matrices')
            hdlbl.pack()
            blnklbl = Label(add_t, text='  ')
            blnklbl.pack()
            frame_main_t = Frame(add_t)
            framet = Frame(frame_main_t)
            t_a = Entry(framet)
            t_a.pack()
            t_d = Entry(framet)
            t_d.pack()
            t_g = Entry(framet)
            t_g.pack()
            framet.pack(side=LEFT)
            framem = Frame(frame_main_t)
            t_b = Entry(framem)
            t_b.pack()
            t_e = Entry(framem)
            t_e.pack()
            t_h = Entry(framem)
            t_h.pack()
            framem.pack(side=RIGHT)
            frameb = Frame(frame_main_t)
            t_c = Entry(frameb)
            t_c.pack()
            t_f = Entry(frameb)
            t_f.pack()
            t_i = Entry(frameb)
            t_i.pack()
            frameb.pack(side=RIGHT)
            frame_main_t.pack(side=TOP)
            def done_addition_t():
                g_add_a_t = int(t_a.get())
                g_add_b_t = int(t_c.get())
                g_add_c_t = int(t_b.get())
                g_add_d_t = int(t_d.get())
                g_add_e_t = int(t_f.get())
                g_add_f_t = int(t_e.get())
                g_add_g_t = int(t_g.get())
                g_add_h_t = int(t_i.get())
                g_add_i_t = int(t_h.get())
                addition_a_t = aat + g_add_a_t
                addition_b_t = bbt + g_add_b_t
                addition_c_t = cct + g_add_c_t
                addition_d_t = ddt + g_add_d_t
                addition_e_t = eet + g_add_e_t
                addition_f_t = fft + g_add_f_t
                addition_g_t = ggt + g_add_g_t
                addition_h_t = hht + g_add_h_t
                addition_i_t = iit + g_add_i_t
                nla = Label(frm_main_right_container, text='    ')
                nla.pack(side=TOP)
                tinvbl = Label(frm_main_right_container, text='Calculated addition is')
                tinvbl.pack()
                frmadj1t = Frame(frm_main_right_container)
                adjlblat = Label(frmadj1t, text='%d'%(addition_a_t))
                adjlblat.pack(side=LEFT)
                adjlbldt = Label(frmadj1t, text='          %d'%(addition_b_t))
                adjlbldt.pack(side=LEFT)
                adjlblgt = Label(frmadj1t, text='          %d'%(addition_c_t))
                adjlblgt.pack(side=LEFT)
                frmadj1t.pack(side=TOP)
                frmadj2t = Frame(frm_main_right_container)
                adjlblbt = Label(frmadj2t, text='%d'%(addition_d_t))
                adjlblbt.pack(side=LEFT)
                adjlblet = Label(frmadj2t, text='          %d'%(addition_e_t))
                adjlblet.pack(side=LEFT)
                adjlblht = Label(frmadj2t, text='          %d'%(addition_f_t))
                adjlblht.pack(side=LEFT)
                frmadj2t.pack(side=TOP)
                frmadj3t = Frame(frm_main_right_container)
                adjlblct = Label(frmadj3t, text='%d'%(addition_g_t))
                adjlblct.pack(side=LEFT)
                adjlblft = Label(frmadj3t, text='          %d'%(addition_h_t))
                adjlblft.pack(side=LEFT)
                adjlblit = Label(frmadj3t, text='          %d'%(addition_i_t))
                adjlblit.pack(side=LEFT)
                frmadj3t.pack(side=TOP)
            all_btn_frm_add = Frame(add_t)     
            dn_btn_t = Button(all_btn_frm_add, text='Done', relief=GROOVE, command=done_addition_t)
            dn_btn_t.pack(side=LEFT)
            cls_btn_t = Button(all_btn_frm_add, text='Close', relief=GROOVE, command=add_t.destroy)
            cls_btn_t.pack(side=LEFT)
            all_btn_frm_add.pack(side=TOP)
            add_t.mainloop()
        else:
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Error : Please input all the values')
            anslblt.pack()
    # addition button    
    add_tButton = Button(framebt,text="Addition",relief=GROOVE,command=addition_cal_t)
    add_tButton.pack(side=LEFT)
    # subtraction function
    def subtraction_cal_t():
        if len(ta.get()) != 0 and len(tb.get()) != 0 and len(tc.get()) != 0 and len(td.get()) != 0 and len(te.get()) != 0 and len(tf.get()) != 0 and len(tg.get()) != 0 and len(th.get()) != 0 and len(ti.get()) != 0:
            aat = int(ta.get())
            cct = int(tb.get())
            bbt = int(tc.get())
            ddt = int(td.get())
            fft = int(te.get())
            eet = int(tf.get())
            ggt = int(tg.get())
            iit = int(th.get())
            hht = int(ti.get())
            sub_t = Tk()
            sub_t.title('Subtraction')
            hdlbl = Label(sub_t, text='Enter another matrix value to calculate subtraction of two matrices')
            hdlbl.pack()
            blnklbl = Label(sub_t, text='  ')
            blnklbl.pack()
            frame_main_t = Frame(sub_t)
            framet = Frame(frame_main_t)
            t_a = Entry(framet)
            t_a.pack()
            t_d = Entry(framet)
            t_d.pack()
            t_g = Entry(framet)
            t_g.pack()
            framet.pack(side=LEFT)
            framem = Frame(frame_main_t)
            t_b = Entry(framem)
            t_b.pack()
            t_e = Entry(framem)
            t_e.pack()
            t_h = Entry(framem)
            t_h.pack()
            framem.pack(side=RIGHT)
            frameb = Frame(frame_main_t)
            t_c = Entry(frameb)
            t_c.pack()
            t_f = Entry(frameb)
            t_f.pack()
            t_i = Entry(frameb)
            t_i.pack()
            frameb.pack(side=RIGHT)
            frame_main_t.pack(side=TOP)
            def done_subtraction_t():
                g_add_a_t = int(t_a.get())
                g_add_b_t = int(t_c.get())
                g_add_c_t = int(t_b.get())
                g_add_d_t = int(t_d.get())
                g_add_e_t = int(t_f.get())
                g_add_f_t = int(t_e.get())
                g_add_g_t = int(t_g.get())
                g_add_h_t = int(t_i.get())
                g_add_i_t = int(t_h.get())
                addition_a_t = aat - g_add_a_t
                addition_b_t = bbt - g_add_b_t
                addition_c_t = cct - g_add_c_t
                addition_d_t = ddt - g_add_d_t
                addition_e_t = eet - g_add_e_t
                addition_f_t = fft - g_add_f_t
                addition_g_t = ggt - g_add_g_t
                addition_h_t = hht - g_add_h_t
                addition_i_t = iit - g_add_i_t
                nla = Label(frm_main_right_container, text='    ')
                nla.pack(side=TOP)
                tinvbl = Label(frm_main_right_container, text='Calculated subtraction is')
                tinvbl.pack()
                frmadj1t = Frame(frm_main_right_container)
                adjlblat = Label(frmadj1t, text='%d'%(addition_a_t))
                adjlblat.pack(side=LEFT)
                adjlbldt = Label(frmadj1t, text='          %d'%(addition_b_t))
                adjlbldt.pack(side=LEFT)
                adjlblgt = Label(frmadj1t, text='          %d'%(addition_c_t))
                adjlblgt.pack(side=LEFT)
                frmadj1t.pack(side=TOP)
                frmadj2t = Frame(frm_main_right_container)
                adjlblbt = Label(frmadj2t, text='%d'%(addition_d_t))
                adjlblbt.pack(side=LEFT)
                adjlblet = Label(frmadj2t, text='          %d'%(addition_e_t))
                adjlblet.pack(side=LEFT)
                adjlblht = Label(frmadj2t, text='          %d'%(addition_f_t))
                adjlblht.pack(side=LEFT)
                frmadj2t.pack(side=TOP)
                frmadj3t = Frame(frm_main_right_container)
                adjlblct = Label(frmadj3t, text='%d'%(addition_g_t))
                adjlblct.pack(side=LEFT)
                adjlblft = Label(frmadj3t, text='          %d'%(addition_h_t))
                adjlblft.pack(side=LEFT)
                adjlblit = Label(frmadj3t, text='          %d'%(addition_i_t))
                adjlblit.pack(side=LEFT)
                frmadj3t.pack(side=TOP)
            all_btn_frm_add = Frame(sub_t)     
            dn_btn_t = Button(all_btn_frm_add, text='Done', relief=GROOVE, command=done_subtraction_t)
            dn_btn_t.pack(side=LEFT)
            cls_btn_t = Button(all_btn_frm_add, text='Close', relief=GROOVE, command=sub_t.destroy)
            cls_btn_t.pack(side=LEFT)
            all_btn_frm_add.pack(side=TOP)
            sub_t.mainloop()
        else:
            nla = Label(frm_main_right_container, text='    ')
            nla.pack(side=TOP)
            anslblt = Label(frm_main_right_container, text='Error : Please input all the values')
            anslblt.pack()
    # subtraction button    
    add_tButton = Button(framebt,text="Subtraction",relief=GROOVE,command=subtraction_cal_t)
    add_tButton.pack(side=LEFT) 
    # clear function
    def clear_all():
        ta.delete(0, END)
        tb.delete(0, END)
        tc.delete(0, END)
        td.delete(0, END)
        te.delete(0, END)
        tf.delete(0, END)
        tg.delete(0, END)
        th.delete(0, END)
        ti.delete(0, END)
    # clear button    
    clrButton = Button(framebt,text="Clear",relief=GROOVE,command=clear_all)
    clrButton.pack(side=LEFT)  
frm_main_right_container.pack(side=LEFT)
frm_main_left_right_container.pack(side=TOP)
def about():
    root = Tk()
    root.title('About')
    abt = Label(root, text='MATRIX CALCULATOR PROJECT BY DAXEEL SONI')
    abt.pack()
    blnk = Label(root, text='  ')
    blnk.pack()
    head1 = Label(root, text='About Matrix Calculator')
    head1.pack()
    dsh1 = Label(root, text='-----------------------')
    dsh1.pack()
    cont11 = Label(root, text='Matrix is a mathematics topic for high school and university')
    cont11.pack()
    cont12 = Label(root, text='students. With the help of Matrix Calculator any student can')
    cont12.pack()
    cont13 = Label(root, text='calculate determinant, transpose, adjoint and inverse of any')
    cont13.pack()
    cont14 = Label(root, text='2 cross 2 and 3 cross 3 matrix. Matrix calculator can also')
    cont14.pack()
    cont15 = Label(root, text='calculate addition and subtraction of any two matrices.')
    cont15.pack()
    blnk2 = Label(root, text='  ')
    blnk2.pack()
    head2 = Label(root, text='About This Project')
    head2.pack()
    dsh2 = Label(root, text='-----------------------')
    dsh2.pack()
    cont21 = Label(root, text='Matrix calculator is my home project. I have developed')
    cont21.pack()
    cont22 = Label(root, text='matrix calculator for different platforms. First, i')
    cont22.pack()
    cont23 = Label(root, text='developed for ANDROID, then LINUX(ShellScript), then')
    cont23.pack()
    cont24 = Label(root, text='for WEB(JavaScript) and this for WINDOWS(Python & TKinter).')
    cont24.pack()
    cont25 = Label(root, text='ShellScript, JavaScript and Python version source code is')
    cont25.pack()
    cont26 = Label(root, text='available on GitHub. I completely made my this project')
    cont26.pack()
    cont27 = Label(root, text='open source. Source code of this application is available at')
    cont27.pack()
    cont28 = Label(root, text='www.github.com/daxeel')
    cont28.pack()
    blnk3 = Label(root, text='  ')
    blnk3.pack()
    cont31 = Label(root, text='(C) Daxeel Soni')
    cont31.pack()
    blnk4 = Label(root, text='  ')
    blnk4.pack()
    btn = Button(root, text='Close', relief=GROOVE, command=root.destroy)
    btn.pack()
#MENU
menubar = Menu(root)
filemenu = Menu(menubar)
filemenu.add_command(label="About",command=about)
filemenu.add_separator()
filemenu.add_command(label="Exit",command=root.destroy)
menubar.add_cascade(label="File",menu=filemenu)
filemenu2 = Menu(menubar)
filemenu2.add_command(label="2 cross 2",command=twoctwo)
filemenu2.add_separator()
filemenu2.add_command(label="3 cross 3",command=threecthree)
menubar.add_cascade(label="Matrix",menu=filemenu2)
root.config(menu=menubar)
